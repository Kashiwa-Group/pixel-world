using UnityEngine;
using UnityEngine.Tilemaps;
using Defective.JSON;

public class PixelImageLoader : MonoBehaviour
{
    public Tilemap numberTilemap;     // Tiles-numbers only
    public TextAsset jsonFile;
    public Sprite[] numberSprites; // we're only throwing subsprites !!
    private Tile[] numberTiles;   
    
    private void Start()
    {
        LoadAndRender();
    }
    
    /// <summary>
    /// Loads and renders a pixel image from a JSON file.
    /// Clears the current tilemap and loads the image at the origin.
    /// <br/>
    /// Expects a JSON file with the following format:
    /// <code>
    /// {
    ///     "width": 3,
    ///     "height": 3,
    ///     "pixels": [
    ///         [0, 0, 0],
    ///         [0, 0, 0],
    ///         [0, 0, 0]
    ///     ],
    ///     "palette": [
    ///         "#ff0000",
    ///         "#00ff00",
    ///         "#0000ff",
    ///         "#ffffff"
    ///     ]
    /// }
    /// </code>
    /// <br/>
    /// The tilemap is cleared and the image is rendered at the origin (0, 0, 0).
    /// The palette is also loaded and saved in the PaletteManager.
    /// </summary>
    [ContextMenu("LoadAndRender")]
    public void LoadAndRender()
    {
        if (jsonFile == null || numberTilemap == null)
        {
            Debug.LogError("Assign all references in inspector (tilemap, json, tiles)");
            return;
        }
        
        BuildTilesFromSprites();

        numberTilemap.ClearAllTiles();

        JSONObject root = new JSONObject(jsonFile.text);

        int width = (int)root["width"].intValue;
        int height = (int)root["height"].intValue;

        var pixelArray = root["pixels"];
        if (pixelArray == null || pixelArray.count != height)
        {
            Debug.LogError($"Pixels missing or row count mismatch: got {pixelArray?.count}, expected {height}");
            return;
        }

        Vector3Int originOffset = new Vector3Int(-width / 2, height / 2, 0);

        for (int y = 0; y < height; y++)
        {
            var row = pixelArray[y];
            if (row == null || row.count != width)
            {
                Debug.LogWarning($"Row {y} is null or width mismatch");
                continue;
            }

            for (int x = 0; x < width; x++)
            {
                int index = (int)row[x].intValue;
                if (index <= 0 || index >= numberTiles.Length) continue;

                Vector3Int cellPos = new Vector3Int(x, -y, 0) + originOffset;
                numberTilemap.SetTile(cellPos, numberTiles[index]);
            }
        }
        
        // Getting palette from JSON
        var paletteJson = root["palette"];
        if (paletteJson == null || paletteJson.count == 0)
        {
            Debug.LogError("No palette found in JSON.");
            return;
        }

        Color[] palette = new Color[paletteJson.count];
        for (int i = 0; i < paletteJson.count; i++)
        {
            string hex = paletteJson[i].stringValue;
            if (!ColorUtility.TryParseHtmlString(hex, out palette[i]))
            {
                Debug.LogWarning($"Failed to parse color {hex} at index {i}, defaulting to white.");
                palette[i] = Color.white;
            }
        }

		// Saving a palette in PaletteManager
        PaletteManager.Instance.SetPalette(palette);
        PaletteManager.Instance.SetTiles(numberTiles);

        //Debug.Log($"âœ… Rendered {width}x{height} grid with numbered tiles");
    }
        
    /// <summary>
    /// Builds numbered tiles from the sprites in numberSprites.
    /// Creates a ScriptableObject of Tile type for each sprite and assigns the sprite, sets color to white and sets the name to "NumberTile_0", "NumberTile_1", etc.
    /// </summary>
    private void BuildTilesFromSprites()
    {
        if (numberSprites == null || numberSprites.Length == 0)
        {
            Debug.LogError("No numberSprites assigned!");
            return;
        }

        numberTiles = new Tile[numberSprites.Length];

        for (int i = 0; i < numberSprites.Length; i++)
        {
            Tile t = ScriptableObject.CreateInstance<Tile>();
            t.sprite = numberSprites[i];
            t.color = Color.white;
            t.name = $"NumberTile_{i}";
            numberTiles[i] = t;
        }
    }
}
